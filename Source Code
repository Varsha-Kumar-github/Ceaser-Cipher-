#!/usr/bin/env python
# coding: utf-8

import sys

def caesar_str_enc(plaintext, K):
    ciphertext=""    
    for ch in plaintext:        
         encch = caesar_ch_enc(ch, K)        
         ciphertext = ciphertext + encch
    return ciphertext
    
def caesar_ch_enc(ch, K):
   encch = ""    
   # everything needed to map a char to its encoded char with K as the parameter    
   if (ord(ch) == 32):        
       encch = ch    
   else:        
       encch += chr((ord(ch) + K - 97) % 26 + 97)    
       return encch

def caesar_str_dec(ciphertext, K):
   plaintext = ""    
   for ch in ciphertext:        
      decch = caesar_ch_dec(ch, K)        
      plaintext = plaintext + decch    
   return plaintext

def caesar_ch_dec (ch, K):   
   decch = ""   
   if(ord(ch) == 32):     
     decch = ch    
   else:      
     decch += chr((ord(ch) - K - 97) % 26 + 97)    
   return decchdef 
   
test_module():   
  K = int(sys.argv[1])    
  input_str = str(sys.argv[2])    
  
  #If you want to add built-in values rather than user input, then it is done as so: 
  #K =3   
  #input_str = "this is a test"    
  
  print(input_str)    
  encstr = caesar_str_enc(input_str, K)   
  print(encstr)    
  decstr = caesar_str_dec(encstr, K)    
  print(decstr)
  
if __name__=="__main__":      
   test_module()
   
# In this case, if you call your file like this:
# >python caeser.py 4(or any k value required) "string to be encoded"
# it should first print the above string
# then the encrypted version of it
# and next the decrypted version of it i.e., the original one
